generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  User        User[]
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  roleId       Int            @default(1) // 1: Librarian || 2: Student
  password     String
  createdAt    DateTime       @default(now())
  Token        Token[]
  BookRegistry BookRegistry[]
  Role         Roles          @relation(fields: [roleId], references: [id])
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Author {
  id    Int     @id @default(autoincrement())
  name  String
  Books Books[]
}

model Genre {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  Books       Books[]
}

model Books {
  id            Int            @id @default(autoincrement())
  title         String
  publishedYear DateTime
  authorId      Int
  genreId       Int
  stock         Int
  BookRegistry  BookRegistry[]

  Author Author @relation(fields: [authorId], references: [id])
  Genre  Genre  @relation(fields: [genreId], references: [id])
}

model BookRegistry {
  id      Int      @id @default(autoincrement())
  userId  String
  booksId Int
  amount  Int
  date    DateTime @default(now())

  User  User   @relation(fields: [userId], references: [id])
  Books Books? @relation(fields: [booksId], references: [id])
}
